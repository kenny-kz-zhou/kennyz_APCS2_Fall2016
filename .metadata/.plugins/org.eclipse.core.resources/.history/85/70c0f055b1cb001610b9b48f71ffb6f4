/* Name: Kenny Zhou
 * Date: 12/8/16
 * Project: Frac Calc
 */


package fracCalc;
import java.util.*;
public class FracCalc {

    public static void main(String[] args) 
    {
    	Scanner input = new Scanner(System.in);
    	System.out.println("Give Expression");
    	String expression = input.nextLine();
    	while (expression.indexOf("quit") < 0){
    	String givenString = input.toString();
    	System.out.println(produceAnswer(givenString));
    	}
    	
        // TODO: Read the input from the user and call produceAnswer with an equation
    }
    public static String produceAnswer(String input){
    String[] inputOperands = parseInput(input);
    int[] firstFrac = new int[3];
    firstFrac = parseOperands(inputOperands[0]);
    int[] secondFrac = new int[3];
    secondFrac = parseOperands(inputOperands[2]);
    int[] answer = new int[2];
    if (inputOperands[1].equals("+")){									//check which operand, call respective method
    	answer = addOrSubFrac(firstFrac, secondFrac, "+");
    }
    if(inputOperands[1].equals("-")){									//subtract calls add
    	answer = addOrSubFrac(firstFrac, secondFrac, "-");
    }
    if(inputOperands[1].equals("*")){
    	answer = multiplyOrDivideFrac(firstFrac, secondFrac, "*");
    }
    if(inputOperands[1].equals("/")){									//divide calls multiply
    	answer = multiplyOrDivideFrac(firstFrac, secondFrac, "/");
    }
     return(simplifyAnswer(answer));  
    }
 // TODO: Implement this function to produce the solution to the input
    // TODO: Fill in the space below with any helper methods that you think you will need
  
    
    public static String[] parseInput(String input){
    	String[] parsedExpression = input.split(" ");		 // Split by fractions and operators
    	return(parsedExpression);
    }
    
    public static int[] parseOperands(String operands){
        int[] parts = new int[3];												// array for parts of the fraction
        int[] improperParts;													// ex: numerator, denominator
        parts[1] = 1;
        if(operands.contains("_")){
                String[] components = new String[2];
                components = operands.split("_");
                int wholeNumber = Integer.parseInt(components[0]);         			//changes whole number from a string to int
                parts[0] = wholeNumber;
                String fraction = components[1];
                String[] fractionComponents = fraction.split("/");
                int numerator = Integer.parseInt(fractionComponents[0]);            //changes numerator and denominator from string to int
                int denominator = Integer.parseInt(fractionComponents[1]);
                parts[1] = numerator;
                parts[2] = denominator;
        }else if(!operands.contains("_") && operands.contains("/")) {		    //if there is no whole number
                String[] splitFrac = operands.split("/");
                int numerator = Integer.parseInt(splitFrac[0]);
                int denominator = Integer.parseInt(splitFrac[1]);
                parts[1] = numerator;
                parts[2] = denominator;
        }else if (!operands.contains("_") && !operands.contains("/")){			//if there is only a whole number
             parts[0] = Integer.parseInt(operands);
             parts[1] = 0;
             parts[2] = 1;
        }
        improperParts = toImproperFrac(parts[0], parts[1], parts[2]);
        return (improperParts);
        }
    public static int[] addOrSubFrac(int[] firstOperand, int[] secondOperand, String operator){ 
    	int[] answer = new int[2];										// 	for answer: answer[0] = numerator, answer[1] = denominator
    	int commonDenominator = 1;
    	int firstNumerator = 0;
    	int secondNumerator = 0;
    	commonDenominator = firstOperand[1] * secondOperand[1];
    	firstNumerator = firstOperand[0] * secondOperand[1];
    	secondNumerator = secondOperand[0] * firstOperand[1];
    	answer[1] = commonDenominator;
    		if(operator.equals("+")){									// 
    			answer[0] = firstNumerator + secondNumerator;
    			
    		}else if( operator.equals("-")){
    			answer[0] = firstNumerator - secondNumerator;
    		}
    		return (answer);
    }
    public static int[] multiplyOrDivideFrac(int[] firstOperand, int[] secondOperand, String operator){
    	int[] answer = new int[2];									// 	for answer: answer[0] = numerator, answer[1] = denominator
    	int numerator = 1;
    	int denominator = 1;
    	if (operator.equals("*")){
    		if(firstOperand[0] == 0 || secondOperand[0] == 0){	
    			answer[0] = 0;
    			answer[1] = 1;
    			return (answer);
    		}
    		numerator = firstOperand[0] * secondOperand[0];
    		denominator = firstOperand[1] * secondOperand[1];
    	}else if(operator.equals("/")){
    		if (firstOperand[0] == 0 || secondOperand[1] == 0){
    			answer[0] = 0;
    			answer[1] = 1;
    			return (answer);
    		}
    		numerator = firstOperand[0] * secondOperand[1];
    		denominator = secondOperand[0] * firstOperand[1];   		
    	}
		answer[0] = numerator;
		answer[1] = denominator;
		return (answer);
    }
	public static int[] toImproperFrac(int wholeNum, int numerator, int denominator){ // Takes a whole number and a fraction to turn it into an improper fraction
		int[] answer = new int[2];
		int imprprNumrtr = 0;
		if (wholeNum >= 0){
			imprprNumrtr = denominator * wholeNum + numerator;				//changes to improper fraction when whole number is postive
		}else if(wholeNum < 0){
			imprprNumrtr = (wholeNum*-1) * denominator + numerator;			// changes to improper when whole number is negative
			imprprNumrtr *= -1;
		}
		answer[0] = imprprNumrtr;
		answer[1] = denominator;
		return (answer);
	}
	public static String toMixedNum(int[] answer){ // Takes an improper fraction and changes it into a mixed number
		int numerator = answer[0];
		int denominator = answer[1];
		int wholeNum = numerator / denominator;
		int remainder = numerator % denominator;
		int commonDenominator = 1;
		if (remainder == 0){							// if numerator is 0, only return wholeNum
			return(wholeNum + "");
		}
		if (remainder < 0){
			remainder *= -1; 							// removes negative from fraction, only wholeNum should be negative
		}
		if (denominator < 0){
			denominator *= -1;
		}
		if (wholeNum == 0){								//if whole num is zero, only return the fraction part
			return (remainder + "/" + denominator);
		}
		commonDenominator = gcf(remainder, denominator);
		remainder = remainder / commonDenominator;
		denominator = denominator / commonDenominator;
			return (wholeNum + "_" + remainder + "/" + denominator);
	}
	public static String simplifyAnswer(int[] unsimpAnswer){
		String answer = "";
		int numerator = unsimpAnswer[0];
		int denominator = unsimpAnswer[1];
		if (Math.abs(unsimpAnswer[0]) > unsimpAnswer[1]){		//if the numerator is larger than the denominator
			answer = toMixedNum(unsimpAnswer);
		}else if(unsimpAnswer[0] == unsimpAnswer[1]){		// if the numerator is equal to the denominator
			answer = "1";
		}else if(unsimpAnswer[0] < unsimpAnswer[1]){			//if the numerator is less than the denominator
			int commonFactor = gcf(numerator, denominator);
			numerator = numerator/commonFactor;
			denominator = denominator/commonFactor;
			answer = numerator + "/" + denominator;
		}
		if (denominator == 1){
			answer = numerator + "";
		}
		return answer;
	}
	public static int gcf(int num1, int num2){
		int gcf = 1;
			for(int i = 1; i < Math.abs(num2); i++){
				if(isDivisibleBy(num1, i) && isDivisibleBy(num2, i)){
					gcf = i;
				}
			}
			return gcf;
	}
	public static boolean isDivisibleBy(int num1, int num2){ // Checks if a number is evenly divisible by another number
		if (num2 == 0){
			throw new IllegalArgumentException("Cannot divide by 0");
		}
		return(num1 % num2 == 0);
		}
}