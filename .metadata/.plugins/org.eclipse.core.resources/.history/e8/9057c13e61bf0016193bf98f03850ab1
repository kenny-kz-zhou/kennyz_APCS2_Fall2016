/* Name: Kenny Zhou
 * Date: 12/8/16
 * Project: Frac Calc
 */


package fracCalc;
import java.util.*;
public class FracCalc {

    public static void main(String[] args) 
    {
    	Scanner input = new Scanner(System.in);
    	System.out.println("Give Expression");
    	String expression = input.nextLine();
    	while (expression.indexOf("quit") < 0){
    	String givenString = input.toString();
    	System.out.println(produceAnswer(givenString));
    	}
    	
        // TODO: Read the input from the user and call produceAnswer with an equation
    	
    }
    
    // ** IMPORTANT ** DO NOT DELETE THIS FUNCTION.  This function will be used to test your code
    // This function takes a String 'input' and produces the result
    //
    // input is a fraction string that needs to be evaluated.  For your program, this will be the user input.
    //      e.g. input ==> "1/2 + 3/4"
    //        
    // The function should return the result of the fraction after it has been calculated
    //      e.g. return ==> "1_1/4"
    public static String produceAnswer(String input){
    String[] inputOperands = parseInput(input);
    int[] firstFrac = new int[3];
    firstFrac = parseOperands(inputOperands[0]);
    int[] secondFrac = new int[3];
    secondFrac = parseOperands(inputOperands[2]);
    String answer = "";
    if (inputOperands[1].equals("+")){
    	answer = addOrSubFrac(firstFrac, secondFrac, "+");
    }
    if(inputOperands[1].equals("-")){
    	answer = addOrSubFrac(firstFrac, secondFrac, "-");
    }
    if(inputOperands[1].equals("*")){
    	answer = multiplyOrDivideFrac(firstFrac, secondFrac, "*");
    }
    if(inputOperands[1].equals("/")){
    	answer = multiplyOrDivideFrac(firstFrac, secondFrac, "/");
    }
     return(answer);  
    }
 // TODO: Implement this function to produce the solution to the input
    // TODO: Fill in the space below with any helper methods that you think you will need
  
    
    public static String[] parseInput(String input){
    	String[] parsedExpression = input.split(" ");		 // Split by fractions and operators
    	return(parsedExpression);
    }
    
    public static int[] parseOperands(String operands){
        int[] parts = new int[3];
        int[] improperParts;
        parts[1] = 1;
        if(operands.contains("_")){
                String[] components = new String[2];
                components = operands.split("_");
                int wholeNumber = Integer.parseInt(components[0]);         			//changes whole number from a string to int
                parts[0] = wholeNumber;
                String fraction = components[1];
                String[] fractionComponents = fraction.split("/");
                int numerator = Integer.parseInt(fractionComponents[0]);            //changes numerator and denominator from string to int
                int denominator = Integer.parseInt(fractionComponents[1]);
                parts[1] = numerator;
                parts[2] = denominator;
        }else if(!operands.contains("_") && operands.contains("/")) {		    //if there is no whole number
                String[] splitFrac = operands.split("/");
                int numerator = Integer.parseInt(splitFrac[0]);
                int denominator = Integer.parseInt(splitFrac[1]);
                parts[1] = numerator;
                parts[2] = denominator;
        }else if (!operands.contains("_") && !operands.contains("/")){
             parts[0] = Integer.parseInt(operands);
             parts[1] = 0;
             parts[2] = 1;
        }
        improperParts = toImproperFrac(parts[0], parts[1], parts[2]);
        return (improperParts);
        }

//    public static String parseOperands(String[] operands){
//    	String secondFrac = operands[2].toString();			 // Takes the second operand
//    	String[] wholePart = secondFrac.split("_");				 // Creates new array for the split integers
//    	int[] finalPieces = new int[2];					
//    	int wholeNum = Integer.parseInt(wholePart[0]);
//    	finalPieces[0] = wholeNum;
//    	String[] fracPart = wholePart[1].split("/");
//    	finalPieces[1] = Integer.parseInt(fracPart[0]);
//    	finalPieces[2] = Integer.parseInt(fracPart[1]);
//    	return("whole:" + finalPieces[0] +" numerator:" + finalPieces[1] + " denominator:" + finalPieces[2]);
//    }
    public static String addOrSubFrac(int[] firstOperand, int[] secondOperand, String operator){ 
    	int[] answer = new int[2];										// 	for answer: answer[0] = numerator, answer[1] = denominator
    	int commonDenominator = 1;
    	int firstNumerator = 0;
    	int secondNumerator = 0;
    	commonDenominator = firstOperand[1] * secondOperand[1];
    	firstNumerator = firstOperand[0] * secondOperand[1];
    	secondNumerator = secondOperand[0] * firstOperand[1]; 			
    			answer[1] = commonDenominator;
    		if(operator.equals("+")){
    			answer[0] = firstNumerator + secondNumerator;
    		}else if( operator.equals("-")){
    			answer[0] = firstNumerator - secondNumerator;
    		}
    		return (answer[0] + "/" + answer[1]);
    }
    public static String multiplyOrDivideFrac(int[] firstOperand, int[] secondOperand, String operator){
    	int[] answer = new int[2];									// 	for answer: answer[0] = numerator, answer[1] = denominator
    	int numerator = 0;
    	int denominator = 1;
    	if (operator.equals("*")){
    		numerator = firstOperand[0] * secondOperand[0];
    		denominator = firstOperand[1] * secondOperand[1];
    	}else{
    		numerator = firstOperand[0] * secondOperand[1];
    		denominator = secondOperand[0] * firstOperand[1];   		
    	}
		answer[0] = numerator;
		answer[1] = denominator;
//		if (numerator == 0){
//			return ("0");
//		}
		return (answer[0] + "/" + answer[1]);
    }
	public static int[] toImproperFrac(int wholeNum, int numerator, int denominator){ // Takes a whole number and a fraction to turn it into an improper fraction
		int[] answer = new int[2];
		int imprprNumrtr = 0;
		int temp = 0;
		if (wholeNum > 0){
			imprprNumrtr = denominator * wholeNum + numerator;
		}else if(wholeNum < 0){
			temp = denominator * wholeNum;
			temp *= -1; 
			temp += numerator;
			temp *= -1;
			imprprNumrtr = temp;
		}
		answer[0] = imprprNumrtr;
		answer[1] = denominator;
		return (answer);
	}
}


